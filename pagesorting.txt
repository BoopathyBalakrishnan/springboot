import java.sql.Timestamp;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.repository.query.Param;




interface StudentPagingRepository extends
                                PagingAndSortingRepository<StudentDetails, Integer> {
                @Query("select s.studentName, s.gender,a.status,s.classDiv,s.id from students s join s.attendance a where s.id=a.rollNo and s.studentName LIKE :studentName% and a.date >= :start and a.date<= :end ORDER BY s.id")
                Page<Object[]> findByStudentName(@Param("studentName") String studentName,
                                                @Param("start") Timestamp date, @Param("end") Timestamp end,
                                                Pageable pageable);

                @Query("select s.studentName, s.gender,a.status,s.classDiv,s.id from students s join s.attendance a where s.id=a.rollNo and s.id LIKE :id% and a.date >= :start and a.date<= :end ORDER BY s.id")
                Page<Object[]> findById(@Param("id") long id,
                                                @Param("start") Timestamp date, @Param("end") Timestamp end,
                                                Pageable pageable);

                @Query("select s.studentName, s.gender,a.status,s.classDiv,s.id from students s join s.attendance a where s.id=a.rollNo and s.classDiv LIKE :classDiv% and a.date >= :start and a.date<= :end ORDER BY s.id")
                Page<Object[]> findByClassDiv(@Param("classDiv") String classDiv,
                                                @Param("start") Timestamp date, @Param("end") Timestamp end,
                                                Pageable pageable);

                @Query("select s.studentName, s.gender,a.status,s.classDiv,s.id from students s join s.attendance a where s.id=a.rollNo and a.status LIKE :status% and a.date >= :start and a.date<= :end ORDER BY s.id")
                Page<Object[]> findByStatus(@Param("status") String status,
                                                @Param("start") Timestamp date, @Param("end") Timestamp end,
                                                Pageable pageable);

                @Query("select s.studentName, s.gender,a.status,s.classDiv,s.id from students s join s.attendance a where s.id=a.rollNo and a.date >= :start and a.date<= :end ORDER BY s.id")
                public Page<Object[]> listAllByPage(@Param("start") Timestamp date,
                                                @Param("end") Timestamp end, Pageable pageable);
}




import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

@Component("studentService")
@Transactional
public class StudentServiceImpl implements StudentService {

                private final StudentPagingRepository studentPagingRepo;
                private final AttendanceRepository detailsRepository;

                public static final String PAGENUMBER = "pageNum";
                public static final String PAGESIZE = "size";

                public StudentServiceImpl(StudentPagingRepository studentPagingRepo, AttendanceRepository detailsRepository) {
                                this.studentPagingRepo = studentPagingRepo;
                                this.detailsRepository = detailsRepository;
                }

                @Override
                public Page<Object[]> listAllByPage(Pageable pageable) {
                                Timestamp start = StudentUtil.getStartDate();
                                Timestamp end = StudentUtil.getEndDate();
                                return studentPagingRepo.listAllByPage(start, end, pageable);
                }

                @Override
                public Long getCount(String status) {
                                Timestamp start = StudentUtil.getStartDate();
                                Timestamp end = StudentUtil.getEndDate();

                                return detailsRepository.getPresentCount(status, start, end);

                }

                @Override
                public int updateDetails(String status, int rollNo) {
                                Timestamp start = StudentUtil.getStartDate();
                                Timestamp end = StudentUtil.getEndDate();

                                int attendance = detailsRepository.setStatus(status, rollNo, start, end);
                                return attendance;
                }

                @Override
                public Page<Object[]> findByName(String name, Pageable pageable) {
                                Timestamp start = StudentUtil.getStartDate();
                                Timestamp end = StudentUtil.getEndDate();
                                return studentPagingRepo.findByStudentName(name, start, end, pageable);
                }

                @Override
                public Page<Object[]> findByRoll(long rollNo, Pageable pageable) {
                                Timestamp start = StudentUtil.getStartDate();
                                Timestamp end = StudentUtil.getEndDate();
                                return studentPagingRepo.findById(rollNo, start, end, pageable);
                }

                @Override
                public Page<Object[]> findByClass(String division, Pageable pageable) {
                                Timestamp start = StudentUtil.getStartDate();
                                Timestamp end = StudentUtil.getEndDate();
                                return studentPagingRepo.findByClassDiv(division, start, end, pageable);
                }

                @Override
                public Page<Object[]> findByStatus(String status, Pageable pageable) {
                                Timestamp start = StudentUtil.getStartDate();
                                Timestamp end = StudentUtil.getEndDate();
                                return studentPagingRepo.findByStatus(status, start, end, pageable);
                }

                @Override
                public StudentListResponse fetchStudentDetails(Map<String, String> requestParams) {

                                StudentResponse studentResponse = null;
                                List<StudentResponse> studentResponses = new ArrayList<StudentResponse>();
                                StudentListResponse studentDetails = new StudentListResponse();
                                int pageNumber, pageSize, pageOffSet;

                                /*
                                *  Page OffSet calculation 
                                 */
                                if (!(CollectionUtils.isEmpty(requestParams)) && (!StringUtils.isEmpty(requestParams.get(PAGENUMBER)))
                                                                && (!StringUtils.isEmpty(requestParams.get(PAGESIZE)))) {
                                                
                                                pageNumber = Integer.parseInt(requestParams.get(PAGENUMBER));
                                                pageSize = Integer.parseInt(requestParams.get(PAGESIZE));

                                                if (pageNumber != 0 && pageSize != 0 ) {

                                                                pageOffSet = (pageNumber -1) * (pageSize); 
                                                                StudentPageableImpl pageableImpl = new StudentPageableImpl(pageNumber, pageSize, pageOffSet);
                                                                Page<Object[]> page = null;
                                                                if (null != requestParams.get("name")) {
                                                                                page = findByName(requestParams.get("name"), pageableImpl);

                                                                } else if (null != requestParams.get("rollNo")) {
                                                                                page = findByRoll(Long.parseLong(requestParams.get("rollNo")), pageableImpl);

                                                                } else if (null != requestParams.get("class")) {
                                                                                page = findByClass(requestParams.get("class"), pageableImpl);

                                                                } else if (null != requestParams.get("status")) {
                                                                                page = findByStatus(requestParams.get("status"), pageableImpl);

                                                                } else {
                                                                                page = listAllByPage(pageableImpl);
                                                                }

                                                                for (Object[] row : page) {
                                                                                studentResponse = new StudentResponse();
                                                                                studentResponse.setStudentName(row[0].toString());
                                                                                studentResponse.setGender(row[1].toString());
                                                                                studentResponse.setStatus(row[2].toString());
                                                                                studentResponse.setClassDiv(row[3].toString());
                                                                                studentResponse.setRollNo(row[4].toString());
                                                                                studentResponses.add(studentResponse);
                                                                }

                                                                if (!studentResponses.isEmpty()) {
                                                                                studentDetails.setMessage("Details Fetched Successfully !!");
                                                                                studentDetails.setStudentDetails(studentResponses);
                                                                } 

                                                                else {
                                                                                studentDetails.setMessage("No Details Found. Please Try Again!!");
                                                                }
                                                }

                                                else {
                                                                studentDetails.setMessage("PageNumber or PageSize is incorrect!!");
                                                }
                                }
                                
                                else {
                                                studentDetails.setMessage("No Details Found. Please Try Again!!");
                                }

                                return studentDetails;
                }

}
